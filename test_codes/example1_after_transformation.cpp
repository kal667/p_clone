// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("example1_after_transformation.bc", getGlobalContext());
 mod->setDataLayout("e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 PointerType* PointerTy_0 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 ArrayType* ArrayTy_1 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 16);
 
 PointerType* PointerTy_2 = PointerType::get(ArrayTy_1, 0);
 
 std::vector<Type*>FuncTy_3_args;
 FunctionType* FuncTy_3 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_3_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_4 = PointerType::get(FuncTy_3, 0);
 
 std::vector<Type*>FuncTy_5_args;
 FuncTy_5_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_5 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_5_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_6_args;
 FuncTy_6_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_6 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_6_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_7_args;
 FunctionType* FuncTy_7 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_7_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_8 = PointerType::get(FuncTy_6, 0);
 
 PointerType* PointerTy_9 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 std::vector<Type*>FuncTy_11_args;
 FuncTy_11_args.push_back(PointerTy_9);
 FunctionType* FuncTy_11 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_11_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_10 = PointerType::get(FuncTy_11, 0);
 
 
 // Function Declarations
 
 Function* func_pop_direct_branch = mod->getFunction("pop_direct_branch");
 if (!func_pop_direct_branch) {
 func_pop_direct_branch = Function::Create(
  /*Type=*/FuncTy_3,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"pop_direct_branch", mod); 
 func_pop_direct_branch->setCallingConv(CallingConv::C);
 }
 AttributeSet func_pop_direct_branch_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_pop_direct_branch_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_pop_direct_branch->setAttributes(func_pop_direct_branch_PAL);
 
 Function* func_pow2 = mod->getFunction("pow2");
 if (!func_pow2) {
 func_pow2 = Function::Create(
  /*Type=*/FuncTy_5,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"pow2", mod); 
 func_pow2->setCallingConv(CallingConv::C);
 }
 AttributeSet func_pow2_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_pow2_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_pow2->setAttributes(func_pow2_PAL);
 
 Function* func_pow2_clone = mod->getFunction("pow2_clone");
 if (!func_pow2_clone) {
 func_pow2_clone = Function::Create(
  /*Type=*/FuncTy_6,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"pow2_clone", mod); 
 func_pow2_clone->setCallingConv(CallingConv::C);
 }
 AttributeSet func_pow2_clone_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_pow2_clone_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_pow2_clone->setAttributes(func_pow2_clone_PAL);
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_7,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_main->setAttributes(func_main_PAL);
 
 Function* func_printf = mod->getFunction("printf");
 if (!func_printf) {
 func_printf = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"printf", mod); // (external, no body)
 func_printf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_printf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_printf->setAttributes(func_printf_PAL);
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_int32_g = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/IntegerType::get(mod->getContext(), 32),
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/"g");
 gvar_int32_g->setAlignment(4);
 
 GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_1,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str");
 gvar_array__str->setAlignment(1);
 
 // Constant Definitions
 ConstantInt* const_int32_12 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 Constant *const_array_13 = ConstantDataArray::getString(mod->getContext(), "pow2 of A = %d\x0A", true);
 ConstantInt* const_int32_14 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_15 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("10"), 10));
 std::vector<Constant*> const_ptr_16_indices;
 const_ptr_16_indices.push_back(const_int32_12);
 const_ptr_16_indices.push_back(const_int32_12);
 Constant* const_ptr_16 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_16_indices);
 
 // Global Variable Definitions
 gvar_int32_g->setInitializer(const_int32_12);
 gvar_array__str->setInitializer(const_array_13);
 
 // Function Definitions
 
 // Function: pop_direct_branch (func_pop_direct_branch)
 {
  
  BasicBlock* label_17 = BasicBlock::Create(mod->getContext(), "",func_pop_direct_branch,0);
  
  // Block  (label_17)
  InlineAsm* ptr_19 = InlineAsm::get(FuncTy_3, "popq %rbp
	addq $$8, %rsp
	leave
	movq (%rsp), %rax
	addq $$8, %rsp
	jmp *%rax
	", "~{dirflag},~{fpsr},~{flags}",true);
  CallInst* void_18 = CallInst::Create(ptr_19, "", label_17);
  void_18->setCallingConv(CallingConv::C);
  void_18->setTailCall(false);
  AttributeSet void_18_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   void_18_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  void_18->setAttributes(void_18_PAL);
  
  ReturnInst::Create(mod->getContext(), label_17);
  
 }
 
 // Function: pow2 (func_pow2)
 {
  Function::arg_iterator args = func_pow2->arg_begin();
  Value* int32_x = args++;
  int32_x->setName("x");
  
  BasicBlock* label_21 = BasicBlock::Create(mod->getContext(), "",func_pow2,0);
  
  // Block  (label_21)
  AllocaInst* ptr_22 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_21);
  ptr_22->setAlignment(4);
  StoreInst* void_23 = new StoreInst(int32_x, ptr_22, false, label_21);
  void_23->setAlignment(4);
  LoadInst* int32_24 = new LoadInst(ptr_22, "", false, label_21);
  int32_24->setAlignment(4);
  LoadInst* int32_25 = new LoadInst(ptr_22, "", false, label_21);
  int32_25->setAlignment(4);
  BinaryOperator* int32_26 = BinaryOperator::Create(Instruction::Mul, int32_24, int32_25, "", label_21);
  ReturnInst::Create(mod->getContext(), int32_26, label_21);
  
 }
 
 // Function: pow2_clone (func_pow2_clone)
 {
  Function::arg_iterator args = func_pow2_clone->arg_begin();
  Value* int32_x_28 = args++;
  int32_x_28->setName("x");
  
  BasicBlock* label_29 = BasicBlock::Create(mod->getContext(), "",func_pow2_clone,0);
  
  // Block  (label_29)
  AllocaInst* ptr_30 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_29);
  ptr_30->setAlignment(4);
  StoreInst* void_31 = new StoreInst(int32_x_28, ptr_30, false, label_29);
  void_31->setAlignment(4);
  LoadInst* int32_32 = new LoadInst(ptr_30, "", false, label_29);
  int32_32->setAlignment(4);
  LoadInst* int32_33 = new LoadInst(ptr_30, "", false, label_29);
  int32_33->setAlignment(4);
  BinaryOperator* int32_34 = BinaryOperator::Create(Instruction::Mul, int32_32, int32_33, "", label_29);
  StoreInst* void_35 = new StoreInst(int32_34, gvar_int32_g, false, label_29);
  void_35->setAlignment(4);
  CallInst* void_36 = CallInst::Create(func_pop_direct_branch, "", label_29);
  void_36->setCallingConv(CallingConv::C);
  void_36->setTailCall(false);
  AttributeSet void_36_PAL;
  void_36->setAttributes(void_36_PAL);
  
  ReturnInst::Create(mod->getContext(), label_29);
  
 }
 
 // Function: main (func_main)
 {
  
  BasicBlock* label_38 = BasicBlock::Create(mod->getContext(), "",func_main,0);
  
  // Block  (label_38)
  AllocaInst* ptr_39 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_38);
  ptr_39->setAlignment(4);
  AllocaInst* ptr_a = new AllocaInst(IntegerType::get(mod->getContext(), 32), "a", label_38);
  ptr_a->setAlignment(4);
  AllocaInst* ptr_p = new AllocaInst(IntegerType::get(mod->getContext(), 32), "p", label_38);
  ptr_p->setAlignment(4);
  StoreInst* void_40 = new StoreInst(const_int32_12, ptr_39, false, label_38);
  StoreInst* void_41 = new StoreInst(const_int32_15, ptr_a, false, label_38);
  void_41->setAlignment(4);
  LoadInst* int32_42 = new LoadInst(ptr_a, "", false, label_38);
  int32_42->setAlignment(4);
  CallInst* void_43 = CallInst::Create(func_pow2_clone, int32_42, "", label_38);
  void_43->setCallingConv(CallingConv::C);
  void_43->setTailCall(false);
  AttributeSet void_43_PAL;
  void_43->setAttributes(void_43_PAL);
  
  LoadInst* int32_44 = new LoadInst(gvar_int32_g, "", false, label_38);
  int32_44->setAlignment(4);
  StoreInst* void_45 = new StoreInst(int32_44, ptr_p, false, label_38);
  void_45->setAlignment(4);
  LoadInst* int32_46 = new LoadInst(ptr_p, "", false, label_38);
  int32_46->setAlignment(4);
  std::vector<Value*> int32_47_params;
  int32_47_params.push_back(const_ptr_16);
  int32_47_params.push_back(int32_46);
  CallInst* int32_47 = CallInst::Create(func_printf, int32_47_params, "", label_38);
  int32_47->setCallingConv(CallingConv::C);
  int32_47->setTailCall(false);
  AttributeSet int32_47_PAL;
  int32_47->setAttributes(int32_47_PAL);
  
  ReturnInst::Create(mod->getContext(), const_int32_12, label_38);
  
 }
 
 return mod;
}
